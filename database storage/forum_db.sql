-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Aug 20, 2023 at 08:28 AM
-- Server version: 10.4.27-MariaDB
-- PHP Version: 8.2.0

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `forum`
--

-- --------------------------------------------------------

--
-- Table structure for table `admins`
--

CREATE TABLE `admins` (
  `id` int(5) NOT NULL,
  `email` varchar(200) NOT NULL,
  `adminname` varchar(200) NOT NULL,
  `password` varchar(200) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `admins`
--

INSERT INTO `admins` (`id`, `email`, `adminname`, `password`, `created_at`) VALUES
(1, 'admin@gmail.com', 'Admin', '$2y$10$NrKqHO0wpeCPG2poTn9OZe9rDhjJudXxXn012BMjpC4xW6Gc5I99G', '2023-08-20 00:38:49'),
(2, 'admin.first@gmail.com', 'Admin 1', '$2y$10$3K65YpPer25A/2mubAKOvuMPaabW5eszgd8fOYd8t1CvBD3yRWpxa', '2023-08-20 02:04:41'),
(3, 'admin2@gmail.com', 'Admin 2', '$2y$10$MC5E6UZTbNWHao3eC5xhcenvpcasAXwMyTdbSWDgYA/9TpWYosAzu', '2023-08-20 04:53:33');

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE `categories` (
  `id` int(5) NOT NULL,
  `name` varchar(200) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `name`, `created_at`) VALUES
(1, 'Front-end', '2023-08-19 04:48:33'),
(2, 'Back-end', '2023-08-19 04:48:33'),
(3, 'Blockchain', '2023-08-19 04:48:33'),
(4, 'DevOps', '2023-08-19 04:48:33'),
(5, 'Tips,Tricks', '2023-08-20 05:47:08');

-- --------------------------------------------------------

--
-- Table structure for table `replies`
--

CREATE TABLE `replies` (
  `id` int(5) NOT NULL,
  `reply` text NOT NULL,
  `user_id` int(5) NOT NULL,
  `user_image` varchar(200) NOT NULL,
  `topic_id` int(5) NOT NULL,
  `user_name` varchar(200) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `replies`
--

INSERT INTO `replies` (`id`, `reply`, `user_id`, `user_image`, `topic_id`, `user_name`, `created_at`) VALUES
(1, 'Great tutorial! Your step-by-step explanation really helped me understand the concept better.', 1, 'gravatar.png', 1, 'tiendung8a6@gmail.com', '2023-08-18 07:00:54'),
(2, 'I had been struggling with this problem for a while, and your code snippet provided the perfect solution. Thanks!', 1, 'gravatar.png', 1, 'tiendung8a6@gmail.com', '2023-08-18 07:00:54'),
(3, 'I appreciate how you broke down a complex topic into easily digestible sections. It made diving into the subject less intimidating.', 1, 'gravatar.png', 2, 'tiendung8a6@gmail.com', '2023-08-19 04:08:36'),
(4, 'Your insights into best practices for coding style are invaluable. It\'s clear you have a deep understanding of clean code principles.', 1, 'gravatar.png', 2, 'tiendung8a6@gmail.com', '2023-08-19 04:08:39'),
(5, 'As a beginner, I\'m thankful for blogs like yours that provide beginner-friendly explanations. Looking forward to more content!', 1, 'gravatar.png', 2, 'tiendung8a6@gmail.com', '2023-08-19 04:08:44'),
(6, 'Your comparison between different programming languages for this task was enlightening. It helped me decide which language to use.', 1, 'gravatar.png', 3, 'tiendung8a6@gmail.com', '2023-08-19 04:09:03'),
(7, 'The debugging tips you shared are real lifesavers. Debugging used to be a nightmare for me, but not anymore!', 1, 'gravatar.png', 4, 'tiendung8a6@gmail.com', '2023-08-19 04:19:07'),
(8, 'I tried implementing your algorithm and encountered a small issue. Can you provide some guidance on how to tackle this?', 1, 'gravatar.png', 5, 'tiendung8a6@gmail.com', '2023-08-19 07:57:12'),
(9, 'Your blog consistently delivers high-quality content. Kudos for maintaining such a high standard!', 1, 'gravatar.png', 6, 'customer@gmail.com', '2023-08-19 08:12:01'),
(10, 'The real-world examples you incorporate into your tutorials make it easier to see how these concepts apply in practical situations.', 1, 'gravatar.png', 7, 'customer@gmail.com', '2023-08-19 08:12:01'),
(11, 'I\'d love to see a follow-up post on advanced techniques related to this topic. Your writing style makes complex concepts accessible.', 1, 'gravatar.png', 7, 'customer@gmail.com', '2023-08-19 08:12:01'),
(12, 'Your passion for programming shines through in your articles. It\'s contagious and motivates me to continue honing my skills.', 1, 'gravatar.png', 7, 'customer@gmail.com', '2023-08-19 08:12:01'),
(13, 'Your troubleshooting guide came in handy when I faced unexpected errors during implementation. Thank you for saving me hours of frustration!', 1, 'gravatar.png', 8, 'customer@gmail.com', '2023-08-19 08:12:01'),
(14, 'Your in-depth exploration of design patterns gave me a deeper appreciation for the thought process behind writing robust code.', 1, 'gravatar.png', 8, 'customer@gmail.com', '2023-08-19 08:12:01'),
(15, 'I admire your commitment to answering every comment. It shows how much you care about your readers\' understanding.', 2, 'gravatar.png', 9, 'customer@gmail.com', '2023-08-19 08:12:01');

-- --------------------------------------------------------

--
-- Table structure for table `topics`
--

CREATE TABLE `topics` (
  `id` int(5) NOT NULL,
  `title` varchar(200) NOT NULL,
  `category` varchar(200) NOT NULL,
  `body` text NOT NULL,
  `user_name` varchar(200) NOT NULL,
  `user_image` varchar(200) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `topics`
--

INSERT INTO `topics` (`id`, `title`, `category`, `body`, `user_name`, `user_image`, `created_at`) VALUES
(1, 'The most popular Frontend Framework today', 'Front-end', 'Popular Web Frontend Frameworks\n1. React\n\nReact\nReact is currently one of the most popular front-end frameworks today, it is a library based on JavaScript component with JSX syntax, developed by Facebook and first introduced in 2011.\n\nThen, in 2013, it became an open-source library. React is growing in popularity with more than 3 million users and more than 1.5 million websites have been created with its help.\n\nBesides, it also has a large community with over 80% of proficient developers who have had a positive experience of using React in their projects at least once.\n\nImportant Features of React\nThe main feature of React is the virtual Document Object Model (DOM) with one-way data binding. Due to its virtual DOM functionality, React is praised for its outstanding performance and is considered as one of the easiest frameworks to learn because of its user-friendliness making it the best choice for beginners.\n\nSince React is a library, unlike other frameworks, it does not maintain some important features. That\'s why React is used to work with other libraries, such as state management, routing, and API interaction.\n\nThis frontend frameworks is the right choice if you want to save time in interactive frontend development because React components are reusable.\n\nAdvantages of React\nSupported by Facebook\nUpdated regularly\nVirtual DOM enables high-speed operation in documents\nCan be combined with many other JS libraries\nEasily move between different versions\nSuitable for beginners\nDisadvantages of React\nLack of well-compiled documentation\nComplicated in learning JSX . syntax\nWhen to use React?\nDue to its virtual DOM capabilities, React is the best choice for complex projects where a significant number of blocks (navigation panels, accordion sections, buttons, ...) go through variable, binary ( binary states).\n\nReact becomes more efficient when used with other libraries, such as Redux.\n\nWhen should React not be used?\nReact is not the best choice for developers who are not ready to code in pure JavaScript. Because JSX syntax requires a lot of effort and time to practice.\n\nReal projects designed by React\nSome popular websites using React.js are Facebook, Netflix, Vivaldi Browser, Khan Academy, Asana, Pinterest, Airbnb, Reddit, BBC, UberEats.\n\n2. Vue.js\n\nVue.js\nMore than 40% of JS developers use Vue.js at least once in their career and over 700k websites have been built with its help.\n\nVue first launched in 2014, it was created by Evan You, the man behind the development of another popular JS framework - Angular.\n\nImportant Features of Vue.js\nVue features a virtual DOM, two-way binding, as the basis for high-speed performance: making it easy to update related components and track data changes, real-time updates are a thing. that any application wants.\n\nVue is considered one of the most beginner-friendly frameworks, comes with well-built documentation and a supportive community.\n\nVue has a wide selection of tools, such as an end to end tool, a plugin installation system, a browser debugging tool, a server renderer, a state manager, and others.\n\nAdvantages of Vue.js\nSmall and fast\nSuitable for beginners\nDetailed documentation\nSimple syntax\nTwo-way data link\nHas a positive effect on SEO\nDisadvantages of Vue.js\nLack of plugins and language barrier (lots of Chinese content)\nStill quite new\nRestrictions on large projects\nThere is no strong business behind it\nWhen should Vue.js be used?\nVue can be one of the best choices when you need to build a single-page app from scratch or create a relatively small project. Vue easily integrates with existing server sites and has powerful features such as ree-shaking, bundling, code-splitting, and more.\n\nWhen should Vue.js not be used?\nVue is still a relatively new framework, so for large projects it cannot guarantee a high level of stability, support, and quick problem resolution.\n\nReal projects designed by Vue.js?\nPopular brands using Vue are Alibaba, 9gag, Reuters, Xiaomi, Ride Receipts.\n\n3. Angular\n\nAngular\nAngular aka Angular 2+, it is an open-source framework, based on TypeScript and one of the most popular software development tools today.\n\nMore than 600k websites have been developed with the help of Angular. As part of the JavaScript ecosystem, it was first introduced by Google in 2009 and has been gaining popularity in the development community ever since.\n\nAbout 60% of web developers have had experience building their website or application using Angular framework, while more than half of them believe it is effective in meeting their needs.', 'tiendung8a6@gmail.com', 'gravatar.png', '2023-08-18 12:20:16'),
(2, 'Web/System Architecture – Basic web/system architecture for beginners', 'Front-end', '1. DNS\nFirst, let\'s find out what is DNS? DNS is an acronym for Domain Name System, roughly understood as the phonebook of the Internet. This is an indispensable part, helping to \"resolve\" domains (domain names) into computer addresses (IPs) on the network.\n\nIn fact, just like instead of us remembering the phone number of \"crush\" to re-enter every time we contact, we save it in our contacts so that next time we just need to call \"crush\". After you change your crush, you can edit your number.\n\n2. Load Balancer\nIn the Vietnamese sense, it is a Load Balancer. Once a certain load threshold is reached, a computer cannot keep upgrading. Then we will use more computers to share and shoulder the requests from the client. Load Balancer (LB) will stand out to help divide requests into servers.\n\n3. Web Application Servers\nIt is the servers that serve our requests. As shown in the image, we can have multiple Web Servers instead of 1 to increase the load.\n\nUsually, the web server acts as a Rendering Server, returning HTML for the browser to understand and display the information to the end user.\n\n4. Database\nDatabase is where all the data in the system is stored. In this architecture, the author only draws the Database symbol as a required component of the system, to store information.\n\nIn fact, the Database can also be divided into more parts, but we can understand it as a Database.\n\n200Lab believes that if you use Web Server (3) to both process and render HTML, it will be as shown in the picture, but if you use Service (8), you should connect (8) and (4) instead of ( 3) and (4).\n\n5. Caching Service\nDuring the operation of the system, there will be data elements that are frequently accessed but rarely changed. Or in case the process of searching and aggregating data is very long, we should think of Cache.\n\nUsually caching services use key / value form on RAM for fastest access O(1).\n\n6. Job Queue (6a) & Servers (6b)\nIn fact, not all requests need to be fully executed and returned by the system. In many cases, the system needs to put the queue (Queue), in the form of FIFO (First-in-first-out), and then return the client as quickly as possible. This queue will be handled through other Job/Server to avoid overloading the main services.\n\nFor example: Order created successfully, the system needs to send email notifications, send notifications to relevant parties and a variety of other operations. If the client has to wait for the system to finish all these jobs, it will not be reasonable, the resources at the server receiving the request also consume a lot.\n\n7. Full-text Search Service\nAs its name suggests, this service is specialized for full-text search.\n\nFor example, you type in the search \"blue t-shirt\", \"blue t-shirt\". The system must return products with the above keywords. The job that sounds like it\'s not difficult is incredibly difficult. Because a normal DB cannot have the power and features to do this in the best and fastest way.\n\nInstead, we will use Elasticsearch, Sphinx Search, Solr or more full-text DB indexes.\n\n8. Services\nWhen the system reaches a certain load threshold, the system should usually be broken down into individual services.\n\nThese services play a certain role: Account Service, Product Service, Order Service, etc. The purpose is still to divide and conquer better, avoid putting all into one server, 1 service will be congested that will affect all other services. .Here you can see that the Web Server only has to do its job of rendering HTML, the services below actually process the information. These services can be independent or communicate with each other, which later architecture \"evolved\" into the very famous Micro Services.\n\n9. Data\nAll 3 sections (9a), (9b) and (9c) in this architecture show Data Warehouse constructions although no details are available.\n\nData Warehouse (data warehouse) is a place to organize and store data that is often large to super large. Data at DWH can be organized in its own way for statistics, analysis, reporting and Machine Learning, which requires a lot of data to operate. We will not use the Database directly for this, because it mismatch, affecting the current load of the system.\n\n10. Cloud storage\nInstead of having to manually store physical files (images, documents, music, videos, etc.) on services and worry about losing and managing them. These services are usually third-party (third-party / 3rd provider) such as: AWS S3, Google Storage.\n\nThe cost for these services is also very very cheap. Therefore, the system should \"transfer\" this part to Cloud Storage to ease the worry.\n\n11. CDN – Content Delivery Network\nAs our users from all over the world. When the system needs to serve physical files better: fast, stable. Then we need to use CDN so they take care of this.\n\nCDN\'s main task is to distribute physical files stored in many servers around the world instead of one place. From there, users near any server will be served by that server. With such a network of physical file delivery, we no longer have to worry too much about backups, or server load and bandwidth.', 'tiendung8a6@gmail.com', 'gravatar.png', '2023-08-18 12:03:29'),
(3, 'What is REST API? How to design RESTful API you don\'t know', 'Back-end', 'REST API (also known as RESTful API) is an application programming interface (API) that adheres to the REST architectural conventions and constraints used in the communication between client and server. REST stands for REpresentational State Transfer, it was created by computer scientist Roy Fielding.\n\nREST APIs usually still use the HTTP/1 protocol with previous definitions that both the client and the server need to adhere to.\n\nCurrently, REST APIs using JSON are very popular. A few may still use XML.\n\nDetails and comparison of HTTP/1 and HTTP/2: HTTP/1 and HTTP/2 protocols\nTwo components in RESTful API\nrest-api\nREpresentational State Transfer\nREST (REpresentational State Transfer) is a representation of data transformation. In this architecture the client and server are completely independent, they do not know anything about each other. Each REST API request carries no previous state (stateless).\n\nSo for the two parties to exchange state, they will have to go through resources. These resources are the representation of data changes.\n\nAPI (Application Programming Interface) is an application programming interface. This interface is not for end users but for developers. It is the \"surface\", only the declaration part (name, parameter, return type) can be seen, the body suit is unknown. \"Knowing the face, not knowing the heart\" is the API.\n\nRequest and Response in REST API\nrest-api\nRequest and Response in REST API\nMethods: Methods\nAs mentioned above, to exchange state they will need to communicate resources through sending request responses via HTTP/1. Specifically how this communication is, they need to specify the corresponding methods including:\n\nGET: Returns a Resource or a list of Resources.\nPOST: Create a new Resource.\nPUT: Update information for Resource (the entire resource).\nPATCH: Update information for resourse (part of resource).\nDELETE: Delete a Resource.\nIf you\'ve heard of CRUD APIs, they represent Create, Read, Update and Delete a resource.\n\nHeader: Authentication and specify the return data type\nRemember that REST API is stateless. Each request does not know any previous information. Unlike when we access the web, the browser will have a session and a cookie to help distinguish who the request is from and what the previous information is.\n\nIn REST, if a request needs to authenticate access, they will have to use additional information in the header. For example, the Authorization information will carry a user token. There are 3 main Authentication mechanisms:\n\nHTTP Basic\nJSON Web Token (JWT)\nOAuth2\nIn addition, the Header also helps the client specify the type of content to return from the server - content type. This is done through the Accept section of the header. Its value is usually the MIME type:\n\nimage — image/png, image/jpeg, image/gif\naudio — audio/wav, audio/mpeg\nvideo — video/mp4, video/ogg\napplication — application/json, application/pdf, application/xml, application/octet-stream\nExample request to get a list of posts:\n\nPLAIN\ncopy\nGET /v1/posts\nAccept: application/json\nStatus Code in RESTful API\nrest-api-la-gi\nStatus Code Meaning\nThe response in the REST API will include a status code that specifies each case. You can view the full list here.\n\nSome popular statuses:\n\n200 OK – Returns success for GET, PUT, PATCH or DELETE methods.\n201 Created – Returns when a Resouce has been created successfully.\n204 No Content – Returns when the Resource is successfully deleted.\n304 Not Modified – Client can use cached data, resource server remains unchanged.\n400 Bad Request – Invalid Request\n401 Unauthorized – Request requires authentication.\n403 Forbidden – permission denied.\n404 Not Found – Resource not found from URI\n405 Method Not Allowed – The method is not allowed for the current user.\n410 Gone – Resource no longer exists, the old version is no longer supported.\n415 Unsupported Media Type – This Resource type is not supported.\n422 Unprocessable Entity – Data is not validated\n429 Too Many Requests – Request denied due to restriction\nSupport version of REST API\nUsually REST API will have version like /v1, /v2 to support older data versions. This is especially important when we upgrade the API to higher versions, this upgrade can make a huge difference: changing the URL, how the user is authenticated, or both the resource name and its structure.\n\nHow to design REST API according to convention\nhow-to-ke-rest-api\nHow to design REST API according to convention\nAlthough the constraints and conventions on developers do not need to adhere to. However, if done \"right\", they will bring a lot of benefits.', 'tiendung8a6@gmail.com', 'gravatar.png', '2023-08-18 12:03:29'),
(4, 'What is Middleware? Middleware application for REST API', 'Back-end', 'What is Middleware?\nMiddleware is middleware to connect components in a system, software or service.\n\nIn backend programming, middleware is located between Request and Response, responsible for receiving and processing supporting information for subsequent middleware or for that Request/Response itself.\n\nMiddleware supports Request and Response\nMiddleware supports Request and Response\nIn distributed systems, Middleware will be the intermediary services to connect important components together.\n\n\nMiddleware in distributed systems\nMiddleware Classification\nAccording to Wikipedia, we have 4 types of middleware:\n\nTransactional: Process synchronous and asynchronous transactions as a group of federation requests from distributed systems, such as banking or credit card payments.\nMessage: Used in message queues and messaging architectures, supporting synchronous and asynchronous communication.\nProcedural: Remote and local architectures for connecting, converting, and retrieving responses to asynchronous system communications.\nObject-oriented: Similar to procedural middleware, however, this type of middleware incorporates object-oriented programming (OOP) design principles. Analytically, its composition includes object references, exceptions, and inheritance of properties through distributed object invocations.\nWhy use Middleware?\nThe purpose of using Middleware is to reduce the components in the system and software, making it easy to reuse and assemble for many different cases.\n\nIn this article, I will focus on middleware in backend programming, specifically REST API with Golang.\n\nHandling a Request in the REST API will involve a lot of business logic. In which there will be a lot of repetitive logic in many other Requests such as: Logging, Authen, Parse body data, ... In order to be able to easily reuse and coordinate the above logic, the use of Middleware is very necessary.\n\nTake, for example, the Authorization check case for Requests that require the client to send an access token. If the access token is invalid or expired, Middlware can help respond to the error before reaching the next handler.\n\nBecause of this, most website building frameworks, REST APIs support Middleware such as: Express, Gin, Echo, Lavarel, ...\n\nUsing Middleware in GIN Golang\nIn essence, Middleware in GIN are defined as HandlerFunc functions, equivalent to a normal Request handler function:\n\nGO\ncopy\n// HandlerFunc defines the handler used by gin middleware as return value.\ntype HandlerFunc func(*Context)\nDefining a Simple Middleware in GIN\nTo illustrate simply, I will declare a Middleware in log every time a Request comes in as follows:\n\nGO\ncopy\nfunc logger() gin.HandlerFunc {\nreturn func(c *gin.Context) {\nlog.Printf(\"Request from %s: %s\", c.ClientIP(), c.Request.URL.Path)\n\nc.Next()\n}\n}\nThe Next() function is used when you want to forward the Request to the following Handler/Middleware. Otherwise, the Abort() function will stop the Request and Response to the client immediately.\n\nUsing Middleware in GIN\nThere are several ways to use Middleware in GIN or rather limit the scope of Middleware:\n\nUse for all requests or the entire application\nGO\ncopy\n//...\nfunc main() {\nrouter := gin.New()\n    \n     router.Use(logger())\n    \n     router.Run()\n}\n//...\nThis way all Requests will pass through the Middleware logger.\n\nUsed for a group\nGO\ncopy\n//...\nfunc main() {\nrouter := gin.New()\n    \n     v1 := router.Group(\"/v1\", logger())\n    \n     router.Run()\n}\n//...\nAll requests to /v1/* will go through the Middleware logger.\n\nUsed for each specific URL\nGO\ncopy\n//...\nfunc main() {\nrouter := gin.New()\n    \n     router.GET(\"/ping\", logger(), func(c *gin.Context) {\nc.JSON(200, gin.H{\"data\": \"pong\"})\n})\n    \n     router.Run()\n}\n//...\nApplies to GET /ping API only.\n\nConsecutive coordination of Middleware together\nGO\ncopy\n//...\nfunc main() {\nrouter := gin.New()\n    \n     router.GET(\"/ping\", logger(), logger(), logger(), func(c *gin.Context) {\nc.JSON(200, gin.H{\"data\": \"pong\"})\n})\n    \n     router.Run()\n}\n//...\nIn fact, we can combine an unlimited number of Middleware to perform more complex logic.\n\nCase study that combines many Middleware\nThe first Middleware declaration is responsible for checking the Access Token and retrieving User information based on the Token. If OK, Next() is allowed, otherwise Abort() - called (1).\nThe second Middleware declaration checks if the User role is Admin/Mod, then Next() is allowed, otherwise, Arbort() - called (2).\nAssuming with API GET /v1/users/1, you only need to use the first Middleware is enough. But with the APIs in the /admin group, you will need 2 Middlware in the correct order (1), (2).\n\nOf course, you do not need to declare 1 more Middleware to redo these 2 jobs. This is the advantage of reusing and connecting Middleware together to implement more complex logic.\n\nAlthough the article uses Golang as an example, you can still use the above thinking to use it', 'tiendung8a6@gmail.com', 'gravatar.png', '2023-08-18 12:21:31'),
(5, 'All you need to know about Microservices', 'Back-end', 'What are microservices?\nMicroservices are a way to keep domain knowledge and business rules in one place.\n\nThis way, each service (or person) has a task that they know how to do best instead of using a service (or person) that knows everything. This is an in-depth approach to building systems.\n\nNow seems to be the right time to find the definition.\nMicroservices - also known as microservices architecture - is an architectural style that structures an application into a collection of services:\n\nMaintainable and easy to test\nReducing dependence is also known as low dependence\nStandalone deployment possible\nOrganized around the ability to serve business\nOwned by a small team\nTo make it easy to understand, the previous day the backend code was a whole block and then deployed to the server. Today, it is divided into many smaller departments than deploying individually. These small units are connected to serve inherent business functions.\n\nof Microservices\nFocus on SOC\n\nFocus on SOC\nSeparation of concerns (SOC) is at the heart of this architecture. Any decisions about future improvements will be made from the way your interests are defined in the app.\n\nAbstract knowledge of a particular function/concern from the users of a microservice makes it suitable. Until the contract (how the service interacts with the outside world) changes, any changes inside the service are highly independent.\n\nThis in theory ensures that any changes made inside the service are independent.\n\nThis is good news for developers who are working on the application, as it means that limited integration testing is enough.\n\nFaster Deployment\n\nFaster Deployment\nSince it is the change in business that causes the change in the application, placing it in separate places ensures minimal changes are required to achieve results.\n\nEach service is managed independently by a team of developers (or just one or two developers), so deployment is faster.\n\nThis can reduce the time for development cycles so that the application can be released soon.\n\nDecentralization leads to resilience and performance\n\nDecentralization leads to resilience and performance\nSince we have grasped the split point, enjoy the benefits it brings to developers.\n\nTechnologists are no longer limited by the tool the entire application uses. Developers have more freedom to choose the right tool for the job than to be constrained by what\'s being used throughout the application. This reflects from the database schemas you use to the actual implementation. Everything is separate.\n\nFrom programming languages, frameworks, backend services, everything can be optimized to the fullest extent without compromising functionality. This is what it means to just do one thing and do it well!\n\nAnother strength of microservices is that changes can be made in a single place. The Golden Rule, as mentioned in Sam Newman\'s book on the same subject:\n\n“Can you make a change to a service and deploy it by itself without changing anything else?”\n\n“Can you make changes to a service and deploy it yourself, without changing anything?”\nEasily debug and test changes\n\nEasily debug and test changes\nWe\'ll get around boundaries and separation a bit. You will feel it now. We always want tight and well-defined boundaries.\n\nBut, how do you enforce boundaries in code? You write test cases that will break as soon as a change breaks the boundary. This means you need an automated, self-contained and constantly updated test suite.\n\nThis will make your microservice extremely flexible and your changes reliable. These sections must also be well documented, possibly using code and otherwise, so that new developers know they have to implement it as well.\n\nScale-up and down on demand\n\nScale-up and down on demand\nDevelopers expect usage to increase over time, and designing with that in mind should often design better products. The best way to scale in a split system is to scale horizontally.\n\nHaving small, well-designed services helps achieve this. Does function X increase traffic? Just add other instances to handle the load. Scale down again at low load back to normal.\n\nDisadvantages of Microservices\nAll of the above points are probably very good, at least in theory.\n\nBut the journey to microservices is a long and arduous one, fraught with potential barriers and pitfalls. This can cause more trouble than it should if the developers are not careful.\n\nNot designed to solve problems\n\nNot designed to solve problems\nWhat happens when we meet', 'tiendung8a6@gmail.com', 'gravatar.png', '2023-08-19 04:43:10'),
(6, 'Difference Between Blockchain vs Cryptocurrency', 'Blockchain', 'Blockchain and cryptocurrency are two terms that are often used interchangeably. However, there will be a big difference between the two. Cryptocurrency is a digital currency that uses blockchain as a ledger to store records of cryptocurrency transactions.\n\nHowever, blockchain has many uses beyond cryptocurrency, including storing and accessing medical data, supply chain and logistical information, and financial records.\n\nLet\'s start with some quick definitions. Blockchain is the technology that allows the existence of cryptocurrencies (including other things). In it, Bitcoin is the name of the most famous cryptocurrency, the technology invented by blockchain. Cryptocurrency is a medium of exchange, such as the US dollar, but it is digital and uses cryptographic techniques to control the creation of currencies and to verify transfers.', 'tiendung8a6@gmail.com', 'gravatar.png', '2023-08-19 05:10:54'),
(7, 'What is Docker Compose? Basic Commands in Docker Compose', 'DevOps', 'What is Docker Compose?\nDocker Compose is a tool for defining and running multi-container applications. Docker Compose can handle multi-containers concurrently in production, staging, development, testing, and CI.\n\nDocker Compose works by applying the rules defined in the docker-compose.yaml file.\n\nSuppose you are developing a web application with the following structure:\n\nA container containing the Node.js web application, running on port 3000.\nA container containing a MySQL database, running on port 3306.\nTo deploy this application using Docker Compose, you need to create a docker-compose.yml file with the following information:\n\nYAML\ncopy\nversion: \"3.9\"\nservices:\n   web:\n     build: .\n     ports:\n       - \"3000:3000\"\n     depends_on:\n       - db\n   db:\n     image: mysql:latest\n     environment:\n       MYSQL_ROOT_PASSWORD: password\n     ports:\n       - \"3306:3306\"\nIn there:\n\nversion: version of Docker Compose\nservices: list of services to deploy\nweb: defines the web service, including building the image from the Dockerfile and mapping the container\'s port 3000 to the host\'s port 3000.\ndepends_on indicates that this service needs to depend on the db service.\ndb: defines the MySQL database service, includes using the MySQL image, sets a password for the root user, and maps the container\'s port 3306 to the host\'s port 3306.\nBasic Commands in Docker Compose\ndocker-compose up: Starting containers\ndocker-compose down: Stop and delete containers\ndocker-compose ps: Show the status of containers\ndocker-compose build: Create images from Dockerfile in each service\ndocker-compose restart: Restart containers\ndocker-compose stop: Stops containers\ndocker-compose rm: Remove unused containers\ndocker-compose logs: Display logs of containers\ndocker-compose config: Display Docker Compose configurations\ndocker-compose exec: Execute a command on a container\ndocker-compose port: Displays the ports of the containers\ndocker-compose top: Shows running processes in containers\nNote: The above commands must be executed in the directory containing the docker-compose.yml file.\nInstall Docker Compose\n\nInstall Docker Compose\nDepending on the operating system, there will be different steps to install Docker Compose. You should download the latest version of Docker Compose from the official Docker Compose website.\n\nInstall Docker Compose on macOS\nTo use Docker Compose on macOS, you just need to install Docker Desktop for Mac and don\'t need to install Docker Compose separately.\n\nInstall Docker Compose on Windows\nTo use Docker Compose on Windows, you just need to install Docker Desktop for Windows and don\'t need to install Docker Compose separately.\n\nInstall Docker Compose on Linux\nGive the Docker Compose binary executable permission with the following command:\nBASH\ncopy\nsudo chmod +x /path/to/docker-compose\nWhere, \"/path/to/docker-compose\" is the path to the Docker Compose binary.\n\nMove the Docker Compose binary to one of the $PATH paths on your system so that it can be accessed from any directory.\nFor example, to move the Docker Compose binary to the /usr/local/bin directory on Linux, you can use the following command:\n\nBASH\ncopy\nsudo mv /path/to/docker-compose /usr/local/bin/docker-compose\nCheck if Docker Compose has been installed successfully by running the following command:\nCSS\ncopy\ndocker-compose --version\nIf successful, this command will display the version of Docker Compose.', 'tiendung8a6@gmail.com', 'gravatar.png', '2023-08-19 05:10:54'),
(8, 'What is CI/CD? Why CI/CD is important in DevOps', 'DevOps', 'What is CI/CD?\r\n\r\nSummary of CI/CD . Process\r\nCI/CD stands for Continuous Integration and Continuous Deployment. It is an automated process in software development that speeds up the software development and release process.\r\n\r\nWhat is CI?\r\nContinuous Integration (CI) also known as continuous integration, they will be viewed successfully once the changes to the source code in an application have been built, tested and put into the repository. The repository here can be Git, Bitbuket, ... CI helps to solve the problem of multi-branch applications at the same time to avoid conflicts.\r\n\r\nFor example\r\nLet\'s say you have a software development team working on a project. Each time a team member submits new source code to the public repository, the toolkit automatically checks the new source code to determine if it is compatible with the main source code. If the new source code is not compatible, the toolkit will notify the developer so that they can update their source code.\r\nWhat is CD?\r\nCD has two definitions, Continuous Delivery and Continuous Deployment which means continuous delivery and continuous deployment. These two concepts are related, sometimes used interchangeably. Both are meant to automate the next stages of a pipeline.\r\n\r\nContinuous Delivery\r\nIn Continuous Delivery, applications from the CI process are shared into the repository. The app then goes through automated testing before the final product is deployed.\r\n\r\nTypically, during the Continuous Delivery phase, the code goes through the following three steps:\r\n\r\nStep 1: The code will enter the staging environment where it goes through the integration and other tests.\r\nStep 2: The code will go through application acceptance testing.\r\nStep 3: The code is sent to the continuous deployment pipeline to prepare it for production.\r\n\r\nThe difference between Continuous Delivery and Continuous Deployment\r\nContinuous Deployment\r\nAfter Continuous Delivery, the application goes through the final Continuous Deployment phase. During this phase, all modules and applications will go through evaluation, debug, test and be ready to go into production.\r\n\r\nFor example\r\nOnce the source code testing has completed successfully, the toolkit will automatically release the latest software to the production or test environment. If the new software has bugs, the toolkit will automatically rollback to the previous version of the software.\r\nIn the example above, you can use a tool like Jenkins or Travis CI to automate the CI/CD process.\r\n\r\nAdvantages of CI/CD\r\nSpeed up development: CI/CD allows the development team to release software quickly and continuously, increasing the speed of development.\r\nError reduction: CI/CD provides an automated environment for code testing, release, and error reduction during development and release.\r\nIncreased flexibility: CI/CD allows the development team to release software dynamically, helping to ensure the product is constantly updated and improved.\r\nIncreased quality: CI/CD provides an automated environment for code testing, which increases quality and reduces the number of bugs in the software.\r\nDisadvantages of CI/CD\r\nHigh cost: CI/CD implementation requires resources and costs, especially when using complex tools.\r\nHighly specialized knowledge: CI/CD implementation requires you to have highly specialized knowledge of the software and related tools.\r\nLong download times: When using CI/CD, download and preparation time can be very long, especially when the software is large.\r\nSecurity Risks: CI/CD can create security risks when release processes are not tightly controlled or configurations are not updated properly.\r\nDifficulty in Troubleshooting: When something goes wrong during the release process, it can be difficult and time consuming to resolve the issue.\r\nWhy is CI/CD important in DevOps?\r\nYou can refer to this article to better understand DevOps!\r\n\r\nWhat is DevOps? Commonly used tools in DevOps\r\nThe meaning of the word DevOps has been shown on the face of the word, they are a combination of two single words Dev and Ops.\r\n\r\n200Lab Blog\r\nPum\r\n\r\nWhat is DevOps?\r\nCI/CD is very important in DevOps because it provides the following range of benefits:\r\n\r\nSpeed up release: The CI/CD process automates the software release and testing process, helping to speed the release of the latest software to production or testing environments.\r\nReduced wait times: CI/CD reduces the wait time for the development team when releasing new software, as testing and release are automated.\r\nIncreased security: CI/CD\'s automated source code checking increases software security, as it helps detect bugs early before they\'re released.\r\nReduced dependency on employees: When using CI/CD, the development team is no longer dependent on a specific person to perform the testing and release processes, which reduces dependencies and reduces wait times .\r\nIncreased flexibility: CI/CD allows development teams to quickly and easily create and release software updates.', 'tiendung8a6@gmail.com', 'gravatar.png', '2023-08-19 05:10:54'),
(9, 'How to speed up my own programming?', 'Tips,Tricks', '1. Invest in learning English\r\n\r\nInvest in learning English\r\nThe ability to communicate in English will be one of the biggest factors leading to your success.\r\n\r\nWays to improve your English\r\n\r\nWatch English movies with English subtitles.\r\nPlay English games.\r\nListen to English music and try to understand the lyrics (if you can understand the lyrics, you can communicate in any voice).\r\nBoldly communicate in English. Talking in English will help you go further in work.\r\nWhen working with tools like Jira/Confluence/etc. Use tools like Grammarly.\r\nRead English documentation of any framework or programming language.\r\nRead English articles.\r\n2. Find a mentor\r\n\r\nFind a mentor\r\nMentor is someone who has a lot of programming experience and is ready to teach you. Ideally, this person can give you technical advice as well as life advice.\r\n\r\nThere are many different ways to learn, but one of the most effective is to learn from a mentor who is on the same path as you. That helps you avoid the same mistakes and traps. Experienced people often know what works and what doesn\'t.\r\n\r\nIf you decide to do it all yourself, you will lose a lot of time, energy, and may feel overwhelmed by the technology. In times like these, it\'s important to have someone available to help you.\r\n\r\nIt is important that this person can help you at different stages of your career. You may not know it, but you are a subordinate and you will be guided by your superior. The ability to recognize and respond to change faster will help you have a more fulfilling career.\r\n\r\nBut software engineering is challenging and exhausting (mainly because you need to keep learning to keep up, and the industry changes incredibly fast).\r\n\r\n3. Take advantage of learning if you have the opportunity\r\n\r\nTake advantage of learning if you have the opportunity\r\nIf the company has some learning program and has a budget for each employee, take advantage of it without hesitation. It\'s not uncommon for companies to have budgets for materials, courses, meetups, and certifications. Take your time and make use of these resources. Don\'t fool yourself by thinking \"I have a lot of work so I don\'t have time for that\".\r\n\r\nIt is worth noting that we often have problems with spending our own salaries on such purposes, which leads to the situation where company budgets go unused and we lose the opportunity to become informed. smarter.\r\n\r\nJust imagine how much knowledge you could accumulate for your entire career simply by using what was offered. Knowledge is power, and it has a direct impact on your salary.\r\n\r\nMore than that, if you are a programmer and are working for someone. That means someone is paying for the problems you solve. You can solve problems in many different ways.\r\n\r\nIt is good if you regularly push yourself to learn new programming languages, new frameworks or new tools. And you get paid to learn new things when you solve a certain problem. Think about that and take advantage of it.\r\n\r\n4. Don\'t be too focused on money\r\n\r\nDon\'t focus too much on money\r\nIn some situations, the pursuit of money can put you in a situation where you know nothing (because you didn\'t give yourself enough time to process the knowledge) and earn a high salary with the feeling of \" unworthy\", has a huge impact on your emotional state.\r\n\r\nAnother downside is that you\'re forced to meet your employer\'s expectations by working hard and keeping up with leftovers. This can lead to burnout.\r\n\r\nAdvice is:\r\n\r\nIn the early stages of your career (up to three years), focus on knowledge and learning - not money.\r\nAfter three years, make sure you are rewarded according to the market (yes, you can “forget” this).\r\n5. Have fun\r\n\r\nBe happy\r\nFun is the most important factor that will help you to work in the IT industry for a long time. In the beginning, it was the process of learning and applying knowledge and seeing how things work together. Then there is satisfaction because the job is done well.\r\n\r\nIn the next stage, some will find joy in teaching others, while others will find joy in solving really difficult technical problems. Some will move into management, while others will move into product management.\r\n\r\nNo matter what the path, try to have fun. If you already know working with computers isn\'t fun at all - and you\'re focused on the money (because IT is paying so much right now) - don\'t do it because you\'ll feel extremely miserable.', 'tiendung8a6@gmail.com', 'gravatar.png', '2023-08-19 05:10:54');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(5) NOT NULL,
  `name` varchar(200) NOT NULL,
  `email` varchar(200) NOT NULL,
  `username` varchar(200) NOT NULL,
  `password` varchar(200) NOT NULL,
  `about` text NOT NULL,
  `avatar` varchar(200) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `username`, `password`, `about`, `avatar`, `created_at`) VALUES
(1, 'tiendung8a6@gmail.com', 'tiendung8a6@gmail.com', 'tiendung8a6@gmail.com', '$2y$10$NrKqHO0wpeCPG2poTn9OZe9rDhjJudXxXn012BMjpC4xW6Gc5I99G', 'I am an eager and passionate student with a burgeoning interest in programming, although I am currently at the early stages of my journey. Despite my limited experience, I am dedicated to learning the fundamental principles of programming. I understand that programming encompasses not only mastering specific languages but also cultivating logical thinking and effective problem-solving skills. Through guidance from instructors and participation in study groups, I have already applied my knowledge to small projects, which has boosted my confidence. I actively seek learning opportunities from diverse sources and consistently challenge myself to expand my skill set. While I am still exploring and developing, I am confident that my determination will help me overcome obstacles and become a proficient programmer. I remain committed to continuous learning, skill refinement, and embracing new projects to further excel in the programming field.', 'gravatar.png', '2023-08-19 08:11:59'),
(2, 'customer@gmail.com', 'customer@gmail.com', 'customer@gmail.com', '$2y$10$NrKqHO0wpeCPG2poTn9OZe9rDhjJudXxXn012BMjpC4xW6Gc5I99G', 'I am an experienced programming professional who has journeyed from a strong foundational understanding to becoming a skilled programmer. My extensive experience includes tackling intricate projects, mastering various programming languages, and excelling in logical problem-solving. I\'ve also enjoyed mentoring junior programmers and am skilled in creating efficient software architectures. Committed to continuous growth, I stay updated with the latest tools and technologies. My successful track record reflects my dedication to programming, and I\'m enthusiastic about taking on new challenges and contributing to innovative projects in the field.', 'gravatar.png', '2023-08-19 08:11:59');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `admins`
--
ALTER TABLE `admins`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `replies`
--
ALTER TABLE `replies`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `topics`
--
ALTER TABLE `topics`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `admins`
--
ALTER TABLE `admins`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;

--
-- AUTO_INCREMENT for table `replies`
--
ALTER TABLE `replies`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=23;

--
-- AUTO_INCREMENT for table `topics`
--
ALTER TABLE `topics`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
